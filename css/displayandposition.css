
/*
Display and Positioning
Flow of HTML: refers to how elements get positioned when HTML is rendered on a page

position:
    - static: default value, elements default as far to the top left of their parent element as they can,
    without running into other elements that have already been rendered
    inline and inline-block elements will fill across from left to right before moving down
    block elements won't allow any other elements to their left or right
    - relative: position relative to the static position, 
    use offset properties top, bottom, left, right to position.  
    Other elements ignore new position and position themselves relative to the original static position
    - absolute: position relative to closest positioned parent element (i.e. parent that isn't static) 
    using offset properties, all other elements ignore the element, do not postion themselves around it
    - fixed: position relative to viewport using positioning porperties, 
    element will not scroll with page but stay fixed in position.
top: works with relative/absolute/fixed, move element down, px ems %
bottom: works with relative/absolute/fixed, move element up, px ems %
left: works with relative/absolute/fixed, move element right, px ems %
right: works with relative/absolute/fixed, move element left, px ems %
z-index: integer, larger integers displayed on top of lower integers, does not work with static elements

display: dictates if element can share horizontal space with other elements
    - inline: height and width cannot be specified, box takes up only as much space 
    as needed to display content, shares horizontal space, default for em, strong, a
    - block: width and height can be set, width by default is full width of parent, 
    height by default is whatever is necessary to fit content, doesn't share horizontal space, 
    default for h1-6, p, div, footer, more
    - inline-block: width and height can be set, shares horizontal space, by default img
    - none: completely removes element from web page with no empty space left where it would have been,
    other elements do not position themselves around it, useful for responsive designs
    where things only appear for certain screen sizes
    - grid/inline-grid: used to create grid containers that are either block level or inline
    - flex/inline-flex: used to create flex containers that are either block level or inline
float: left, right, works only with static or relative positioned elements, 
    element must have specified width - no visibe effect if width of element is full width of parent
clear: used with float when floated elements bump into each other
    - left/right: left/right side of element will not touch any other element within the same parent
    - both: neither side will touch any other element with the same parent
    - none: element can touch on either side
*/

#block-container,
#block-container-display {
    border: 1px solid black;
    width: 100%;
    position: relative;
    margin-bottom: 200px;
}

#block-1 {
    background-color: lightblue;
    width: 120px;
    height: 70px;
    position: static;
}

#block-2 {
    background-color: lightgreen;
    width: 120px;
    height: 70px;
    position: relative;
    top: 20px;
    left: 20px;
}

#block-3 {
    background-color: lightcoral;
    width: 120px;
    height: 70px;
    position: absolute;
    top: 30px;
    left: 500px;
    z-index: 20;
}

#block-4 {
    background-color: lightgray;
    width: 120px;
    height: 70px;
    position: fixed;
    top: 30px;
    left: 550px;
    z-index: 10;
}

#block-5 {
    display: block;
    background-color: lightblue;
    width: 120px;
    height: 70px;
    position: static;
}

#block-6 {
    display: block;
    background-color: lightgreen;
    width: 120px;
    height: 70px;
    position: static;
    float: right;
    clear: right;
}

.clearfix::after {
    content: "";
    clear: both;
    display: table;
}

#block-7 {
    display: block;
    background-color: lightcoral;
    width: 120px;
    height: 70px;
    position: static;
}

#block-8 {
    display: block;
    background-color: lightgray;
    width: 120px;
    height: 70px;
    position: static;
    float: right;
}

#block-9 {
    display: block;
    background-color: lightblue;
    width: 120px;
    height: 70px;
    position: static;
    float: right;
}

#block-10 {
    display: block;
    background-color: lightgreen;
    width: 120px;
    height: 70px;
    position: static;
    float: right;
}

#block-11 {
    display: block;
    background-color: lightcoral;
    width: 120px;
    height: 70px;
    position: static;
}

#block-12 {
    display: block;
    background-color: lightgray;
    width: 120px;
    height: 70px;
    position: static;
}

#block-13 {
    display: block;
    background-color: lightblue;
    width: 120px;
    height: 70px;
    position: static;
    float: right;
}

#block-14 {
    display: block;
    background-color: lightgreen;
    width: 120px;
    height: 70px;
    position: static;
    float: right;
    clear: right;
}

#block-15 {
    display: block;
    background-color: lightcoral;
    width: 120px;
    height: 70px;
    position: static;
}

#block-16 {
    display: block;
    background-color: lightgray;
    width: 120px;
    height: 70px;
    position: static;
}